{"version":3,"sources":["assets/logo.svg","components/loading/Loading.js","redux/actionTypes.js","redux/selectors.js","pages/dashboard/Dashboard.js","redux/actions.js","pages/settings/Settings.js","appRouter/AppRouter.js","components/header/Header.js","App.js","redux/reducers/initialState.js","redux/combineReducers.js","redux/reducers/searchTextReducer.js","redux/reducers/loadingReducer.js","redux/reducers/gifItemsReducer.js","redux/store.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loading","loading","this","props","react_default","a","createElement","className","CircularProgress","react","Component","LOADING","GIF_ITEMS","SEARCH_TEXT","getSearchValue","store","searchText","getGifItems","gifItems","Dashboard","apply","_this","setLoading","fetch","concat","inputValue","then","response","json","data","setGifItems","catch","error","console","finally","updateInputValue","event","setSearchText","target","value","submitApply","preventDefault","noDataFound","length","listItems","map","item","key","id","src","images","preview_gif","url","alt","components_loading_Loading","onSubmit","TextField","label","onChange","margin","Button","variant","onClick","color","mapDispatchToProps","type","text","connect","state","loadingReducer","gifItemsReducer","searchTextReducer","Settings","AppRouter","Switch","Route","exact","path","render","Redirect","to","pages_dashboard_Dashboard","pages_settings_Settings","Header","withRouter","_React$useState","React","useState","currentPathName","location","pathname","availablePathNames","indexOf","getDefaultPathName","_React$useState2","Object","slicedToArray","setValue","Tabs","indicatorColor","textColor","newValue","history","push","aria-label","Tab","logo","App","BrowserRouter","basename","process","header_Header","appRouter_AppRouter","initialState","rootReducer","combineReducers","arguments","undefined","action","assign","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","es","src_App_0","document","getElementById","URL","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.99c9e5b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Loading.scss';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nclass Loading extends Component {\r\n    render() {\r\n        const loading = this.props.loading ? (\r\n            <div className=\"background\">\r\n                <CircularProgress />\r\n            </div>\r\n        ) : (\r\n            ''\r\n        );\r\n\r\n        return <Fragment>{loading}</Fragment>;\r\n    }\r\n}\r\n\r\nLoading.propTypes = {\r\n    loading: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Loading;\r\n","/*\r\n * action types\r\n */\r\n\r\nexport const LOADING = 'LOADING';\r\nexport const GIF_ITEMS = 'GIF_ITEMS';\r\nexport const SEARCH_TEXT = 'ADD_TODO';\r\n","export const getSearchValue = store => store.searchText;\r\nexport const getLoading = store => store.loading;\r\nexport const getGifItems = store => store.gifItems;\r\n\r\n","import React, { Component } from 'react';\r\nimport './Dashboard.scss';\r\nimport Loading from '../../components/loading/Loading';\r\nimport { setSearchText, setLoading } from '../../redux/actions';\r\nimport { connect } from 'react-redux';\r\nimport { getSearchValue, getLoading, getGifItems } from '../../redux/selectors';\r\nimport { PropTypes } from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { setGifItems } from './../../redux/actions';\r\n\r\nclass Dashboard extends Component {\r\n    componentDidMount() {\r\n        this.apply();\r\n    }\r\n\r\n    apply = () => {\r\n        this.props.setLoading(true);\r\n        fetch(\r\n            `https://api.giphy.com/v1/gifs/search?api_key=ezgeQFp8RBCfqenZQS6nu7StZyRGvffd&q=${\r\n                this.props.inputValue\r\n            }&limit=25&offset=0&rating=G&lang=en`\r\n        )\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                this.props.setGifItems(data.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            })\r\n            .finally(() => {\r\n                this.props.setLoading(false);\r\n            });\r\n    };\r\n\r\n    updateInputValue = event => {\r\n        this.props.setSearchText(event.target.value);\r\n    };\r\n\r\n    submitApply = event => {\r\n        event.preventDefault();\r\n        this.apply();\r\n    };\r\n\r\n    render() {\r\n        const noDataFound =\r\n            !this.props.loading && !this.props.gifItems.length\r\n                ? 'No data found'\r\n                : '';\r\n        const listItems = this.props.gifItems.map(item => {\r\n            return (\r\n                <img\r\n                    key={item.id}\r\n                    src={item.images.preview_gif.url}\r\n                    alt=\"pictuire\"\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"Dashboard\">\r\n                <Loading loading={this.props.loading} />\r\n\r\n                <div className=\"input-field\">\r\n                    <form onSubmit={this.submitApply}>\r\n                        <TextField\r\n                            id=\"searchField\"\r\n                            label=\"Search\"\r\n                            value={this.props.inputValue}\r\n                            onChange={this.updateInputValue}\r\n                            margin=\"normal\"\r\n                        />\r\n                    </form>\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={this.apply}\r\n                        color=\"primary\"\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n\r\n                <br />\r\n\r\n                {this.props.loading}\r\n                {listItems}\r\n                {noDataFound}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    loading: getLoading(state.loadingReducer),\r\n    gifItems: getGifItems(state.gifItemsReducer),\r\n    inputValue: getSearchValue(state.searchTextReducer)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setLoading,\r\n    setSearchText,\r\n    setGifItems\r\n};\r\n\r\nDashboard.propTypes = {\r\n    loading: PropTypes.bool.isRequired,\r\n    setLoading: PropTypes.func.isRequired,\r\n    inputValue: PropTypes.string.isRequired,\r\n    setSearchText: PropTypes.func.isRequired,\r\n    gifItems: PropTypes.array.isRequired,\r\n    setGifItems: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Dashboard);\r\n","import { SEARCH_TEXT, LOADING, GIF_ITEMS } from \"./actionTypes\";\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function setSearchText(text) {\r\n  return { type: SEARCH_TEXT, text }\r\n}\r\n\r\nexport function setLoading(loading) {\r\n  return { type: LOADING, loading }\r\n}\r\n\r\nexport function setGifItems(gifItems) {\r\n  return { type: GIF_ITEMS, gifItems }\r\n}","import React, {Component} from 'react';\r\nimport './Settings.scss';\r\n\r\nclass Settings extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Settings\">\r\n\t\t\t\tSettings Page\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Dashboard from '../pages/dashboard/Dashboard';\r\nimport Settings from '../pages/settings/Settings';\r\n\r\nclass AppRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route\r\n                    exact\r\n                    path=\"/\"\r\n                    render={() => <Redirect to=\"/dashboard\" />}\r\n                />\r\n\r\n                <Route\r\n                    exact\r\n                    path=\"/dashboard\"\r\n                    render={props => <Dashboard {...props} />}\r\n                />\r\n                <Route\r\n                    path=\"/settings\"\r\n                    render={props => <Settings {...props} />}\r\n                />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport logo from '../../assets/logo.svg';\r\nimport './Header.scss';\r\nimport { Tabs, Tab } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst Header = withRouter(props => {\r\n    const getDefaultPathName = () => {\r\n        const currentPathName = props.location.pathname;\r\n        const availablePathNames = ['/dashboard', '/settings'];\r\n        return availablePathNames.indexOf(currentPathName) === -1\r\n            ? availablePathNames[0]\r\n            : currentPathName;\r\n    };\r\n\r\n    const [value, setValue] = React.useState(getDefaultPathName());\r\n\r\n    function handleChange(event, newValue) {\r\n        setValue(newValue);\r\n        props.history.push(newValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Header\">\r\n            <header className=\"app-header\">\r\n                <Tabs\r\n                    className=\"tabs\"\r\n                    value={value}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"primary\"\r\n                    onChange={handleChange}\r\n                    aria-label=\"disabled tabs example\"\r\n                >\r\n                    <Tab\r\n                        label=\"Dashboard\"\r\n                        value=\"/dashboard\"\r\n                        className=\"navigation-item\"\r\n                    />\r\n                    <Tab\r\n                        label=\"Settings\"\r\n                        value=\"/settings\"\r\n                        className=\"navigation-item\"\r\n                    />\r\n                </Tabs>\r\n\r\n                <div className=\"logo-wrapper\">\r\n                    <img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n                    <span className=\"app-title\">React App</span>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Header;\r\n","import React, { Component, Fragment } from 'react';\r\nimport './App.scss';\r\nimport AppRouter from './appRouter/AppRouter';\r\nimport Header from './components/header/Header';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                    <Fragment>\r\n                        <Header />\r\n                        <AppRouter />\r\n                    </Fragment>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","export const initialState = {\r\n    searchText: 'Cats',\r\n    gifItems: [],\r\n    loading: true\r\n};","import { combineReducers } from 'redux';\r\nimport { searchTextReducer } from './reducers/searchTextReducer';\r\nimport { loadingReducer } from './reducers/loadingReducer';\r\nimport { gifItemsReducer } from './reducers/gifItemsReducer';\r\n\r\nconst rootReducer = combineReducers({ searchTextReducer, loadingReducer, gifItemsReducer });\r\n\r\nexport default rootReducer;\r\n","import { initialState } from './initialState';\r\nimport { SEARCH_TEXT } from '../actionTypes';\r\n\r\nexport const searchTextReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEARCH_TEXT:\r\n            return Object.assign({}, state, {\r\n                searchText: action.text\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { initialState } from './initialState';\r\nimport { LOADING } from './../actionTypes';\r\n\r\nexport const loadingReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOADING:\r\n            return Object.assign({}, state, {\r\n                loading: action.loading\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { initialState } from './initialState';\r\nimport { GIF_ITEMS } from './../actionTypes';\r\n\r\nexport const gifItemsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GIF_ITEMS:\r\n            return Object.assign({}, state, {\r\n                gifItems: action.gifItems\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport rootReducer from './combineReducers';\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t// [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === '[::1]' ||\r\n\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\twindow.location.hostname.match(\r\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t)\r\n);\r\n\r\nexport default function register() {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not local host. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\r\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\r\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\r\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('Error during service worker registration:', error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t'No internet connection found. App is running in offline mode.'\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}