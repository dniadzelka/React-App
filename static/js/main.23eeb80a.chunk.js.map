{"version":3,"sources":["assets/logo.svg","components/loading/Loading.js","redux/actionTypes.js","pages/dashboard/Dashboard.js","redux/actions.js","redux/selectors.js","pages/settings/Settings.js","appRouter/AppRouter.js","components/header/Header.js","App.js","redux/reducers.js","redux/store.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loading","loading","this","props","react_default","a","createElement","className","react","Component","SEARCH_TEXT","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","apply","fetch","concat","inputValue","then","response","json","data","setState","items","catch","error","console","finally","isLoading","updateInputValue","event","setSearchText","target","value","submitApply","preventDefault","state","noDataFound","length","listItems","map","item","key","id","src","images","preview_gif","url","alt","components_loading_Loading","onSubmit","TextField","label","onChange","margin","Button","variant","color","mapDispatchToProps","text","log","type","connect","store","searchText","Settings","AppRouter","Route","exact","path","render","Redirect","to","pages_dashboard_Dashboard","pages_settings_Settings","Header","NavLink","logo","App","BrowserRouter","basename","process","components_header_Header","appRouter_AppRouter","initialState","rootReducer","arguments","undefined","action","assign","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","es","src_App_0","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wVCsBzBC,gMAZb,IAAMC,EAAUC,KAAKC,MAAMF,QAAUG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAmB,GAEvE,OACCH,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACEP,UANiBQ,cCLTC,EAAc,yCCOrBC,cACF,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KAWVe,MAAQ,WACJN,EAAKX,SAAQ,GACbkB,MAAK,mFAAAC,OAEGR,EAAKT,MAAMkB,WAFd,wCAKAC,KAAK,SAAAC,GACF,OAAOA,EAASC,SAEnBF,KAAK,SAAAG,GACFb,EAAKc,SAAS,CACVC,MAAOF,EAAKA,SAGnBG,MAAM,SAAAC,GACHC,QAAQD,MAAMA,KAEjBE,QAAQ,WACLnB,EAAKX,SAAQ,MA/BNW,EAmCnBX,QAAU,SAAA+B,GACNpB,EAAKc,SAAS,CACVzB,QAAS+B,KArCEpB,EAyCnBqB,iBAAmB,SAAAC,GACftB,EAAKT,MAAMgC,cAAcD,EAAME,OAAOC,QA1CvBzB,EA6CnB0B,YAAc,SAAAJ,GACVA,EAAMK,iBACN3B,EAAKM,SA7CLN,EAAK4B,MAAQ,CACTb,MAAO,GACP1B,SAAS,GAJEW,mFASfV,KAAKgB,yCA0CL,IAAMuB,EACDvC,KAAKsC,MAAMvC,SAAYC,KAAKsC,MAAMb,MAAMe,OAEnC,GADA,gBAEJC,EAAYzC,KAAKsC,MAAMb,MAAMiB,IAAI,SAAAC,GACnC,OACIzC,EAAAC,EAAAC,cAAA,OACIwC,IAAKD,EAAKE,GACVC,IAAKH,EAAKI,OAAOC,YAAYC,IAC7BC,IAAI,eAKhB,OACIhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAC+C,EAAD,CAASpD,QAASC,KAAKsC,MAAMvC,UAE7BG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,QAAMgD,SAAUpD,KAAKoC,aACjBlC,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACIR,GAAG,cACHS,MAAM,SACNnB,MAAOnC,KAAKC,MAAMkB,WAClBoC,SAAUvD,KAAK+B,iBACfyB,OAAO,YAIftD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,WAAjC,UAKJzD,EAAAC,EAAAC,cAAA,WAECqC,EACAF,UAzFOhC,aAkGlBqD,EAAqB,CAEvB3B,cCzGG,SAAuB4B,GAE5B,OADAjC,QAAQkC,IAAI,aAAc,CAAEC,KAAMvD,EAAaqD,SACxC,CAAEE,KAAMvD,EAAaqD,UD+GfG,cAZS,SAAA1B,GAAK,MAAK,CAAEnB,YE1GN8C,EF0GiC3B,EE1GxB2B,EAAMC,aAAf,IAAAD,GFwH1BL,EAFWI,CAGbvD,GG5Ga0D,0LARb,OACCjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,wBAHoBE,cC0BR6D,mLAtBP,OACIlE,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACIJ,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CACIC,OAAK,EACLC,KAAK,IACLC,OAAQ,kBAAMtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAUC,GAAG,kBAG/BxE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CACIC,OAAK,EACLC,KAAK,aACLC,OAAQ,SAAAvE,GAAK,OAAIC,EAAAC,EAAAC,cAACuE,EAAc1E,MAEpCC,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CACIE,KAAK,YACLC,OAAQ,SAAAvE,GAAK,OAAIC,EAAAC,EAAAC,cAACwE,EAAa3E,cAjB3BM,uCCkBTsE,0LAhBb,OACC3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACCJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACjBH,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAASJ,GAAG,cAAaxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,cACzBH,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAASJ,GAAG,aAAYxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,aAExBH,EAAAC,EAAAC,cAAA,OAAK0C,IAAKiC,IAAM1E,UAAU,WAAW6C,IAAI,SACzChD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,uBAVeE,uBCgBNyE,mLAbP,OACI9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAeC,SAAUC,cACrBjF,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACIJ,EAAAC,EAAAC,cAACgF,EAAD,MACAlF,EAAAC,EAAAC,cAACiF,EAAD,gBAPN9E,qBCFZ+E,EAAe,CACjBpB,WAAY,iBAchB,IAEeqB,EAbf,WAAyD,IAA9BjD,EAA8BkD,UAAAhD,OAAA,QAAAiD,IAAAD,UAAA,GAAAA,UAAA,GAAtBF,EAAcI,EAAQF,UAAAhD,OAAA,EAAAgD,UAAA,QAAAC,EACrD,OAAQC,EAAO3B,MACX,KAAKvD,EACD,OAAOG,OAAOgF,OAAO,GAAIrD,EAAO,CAC5B4B,WAAYwB,EAAO7B,OAE3B,QACI,OAAOvB,ICZJsD,cACXL,EACAM,OAAOC,8BAAgCD,OAAOC,gCCK5CC,EAAcC,QACU,cAA7BH,OAAOI,SAASC,UAEa,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACxB,2DAsCF,SAASC,EAAgBC,GACxBC,UAAUC,cACRC,SAASH,GACTjF,KAAK,SAAAqF,GACLA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBrE,QAChBgE,UAAUC,cAAcO,WAK3BlF,QAAQkC,IAAI,6CAKZlC,QAAQkC,IAAI,2CAMhBpC,MAAM,SAAAC,GACNC,QAAQD,MAAM,4CAA6CA,KCvE9DoF,IAASvC,OACLtE,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAU/C,MAAOA,GACb/D,EAAAC,EAAAC,cAAC6G,EAAD,OAEJC,SAASC,eAAe,SDQb,WACd,GAA6C,kBAAmBb,UAAW,CAG1E,GADkB,IAAIc,IAAIjC,aAAwBU,OAAOI,UAC3CoB,SAAWxB,OAAOI,SAASoB,OAIxC,OAGDxB,OAAOyB,iBAAiB,OAAQ,WAC/B,IAAMjB,EAAK,GAAAnF,OAAMiE,aAAN,sBAEPY,GAiDP,SAAiCM,GAEhCpF,MAAMoF,GACJjF,KAAK,SAAAC,GAGgB,MAApBA,EAASkG,SACuD,IAAhElG,EAASmG,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CpB,UAAUC,cAAcoB,MAAMvG,KAAK,SAAAqF,GAClCA,EAAamB,aAAaxG,KAAK,WAC9ByE,OAAOI,SAAS4B,aAKlBzB,EAAgBC,KAGjB3E,MAAM,WACNE,QAAQkC,IACP,mEArEAgE,CAAwBzB,GAIxBC,UAAUC,cAAcoB,MAAMvG,KAAK,WAClCQ,QAAQkC,IACP,+GAMFsC,EAAgBC,MClCpB0B","file":"static/js/main.23eeb80a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component, Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Loading.scss';\r\n\r\nconst propTypes = {\r\n\tloading: PropTypes.bool.isRequired\r\n};\r\n\r\nclass Loading extends Component{\r\n\trender() {\r\n\t\tconst loading = this.props.loading ? <div className=\"loading\"></div> : '';\r\n\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t{loading}\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nLoading.propTypes = propTypes;\r\n\r\nexport default Loading;","/*\r\n * action types\r\n */\r\nexport const SEARCH_TEXT = 'ADD_TODO'","import React, { Component } from 'react';\r\nimport './Dashboard.scss';\r\nimport Loading from '../../components/loading/Loading';\r\nimport { setSearchText } from '../../redux/actions';\r\nimport { connect } from 'react-redux';\r\nimport { getSearchValue } from '../../redux/selectors';\r\nimport { PropTypes } from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.apply();\r\n    }\r\n\r\n    apply = () => {\r\n        this.loading(true);\r\n        fetch(\r\n            `https://api.giphy.com/v1/gifs/search?api_key=ezgeQFp8RBCfqenZQS6nu7StZyRGvffd&q=${\r\n                this.props.inputValue\r\n            }&limit=25&offset=0&rating=G&lang=en`\r\n        )\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    items: data.data\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            })\r\n            .finally(() => {\r\n                this.loading(false);\r\n            });\r\n    };\r\n\r\n    loading = isLoading => {\r\n        this.setState({\r\n            loading: isLoading\r\n        });\r\n    };\r\n\r\n    updateInputValue = event => {\r\n        this.props.setSearchText(event.target.value);\r\n    };\r\n\r\n    submitApply = event => {\r\n        event.preventDefault();\r\n        this.apply();\r\n    };\r\n\r\n    render() {\r\n        const noDataFound =\r\n            !this.state.loading && !this.state.items.length\r\n                ? 'No data found'\r\n                : '';\r\n        const listItems = this.state.items.map(item => {\r\n            return (\r\n                <img\r\n                    key={item.id}\r\n                    src={item.images.preview_gif.url}\r\n                    alt=\"pictuire\"\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"Dashboard\">\r\n                <Loading loading={this.state.loading} />\r\n\r\n                <div className=\"input-field\">\r\n                    <form onSubmit={this.submitApply}>\r\n                        <TextField\r\n                            id=\"searchField\"\r\n                            label=\"Search\"\r\n                            value={this.props.inputValue}\r\n                            onChange={this.updateInputValue}\r\n                            margin=\"normal\"\r\n                        />\r\n                    </form>\r\n\r\n                    <Button variant=\"outlined\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n\r\n                <br />\r\n\r\n                {listItems}\r\n                {noDataFound}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// must return a plain object, which will be merged into the componentâ€™s props;\r\nconst mapStateToProps = state => ({ inputValue: getSearchValue(state) });\r\n\r\nconst mapDispatchToProps = {\r\n    // ... normally is an object full of action creators\r\n    setSearchText\r\n};\r\n\r\nDashboard.propTypes = {\r\n    setSearchText: PropTypes.func.isRequired,\r\n    inputValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Dashboard);\r\n","import { SEARCH_TEXT } from \"./actionTypes\";\r\n\r\n/*\r\n * action creators\r\n */\r\nexport function setSearchText(text) {\r\n  console.log('dispatched', { type: SEARCH_TEXT, text });\r\n  return { type: SEARCH_TEXT, text }\r\n}","export const getSearchValue = store => store.searchText;","import React, {Component} from 'react';\r\nimport './Settings.scss';\r\n\r\nclass Settings extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Settings\">\r\n\t\t\t\tSettings Page\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Settings;","import React, { Component, Fragment } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport Dashboard from '../pages/dashboard/Dashboard';\r\nimport Settings from '../pages/settings/Settings';\r\n\r\nclass AppRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Route\r\n                    exact\r\n                    path=\"/\"\r\n                    render={() => <Redirect to=\"/dashboard\" />}\r\n                />\r\n\r\n                <Route\r\n                    exact\r\n                    path=\"/dashboard\"\r\n                    render={props => <Dashboard {...props} />}\r\n                />\r\n                <Route\r\n                    path=\"/settings\"\r\n                    render={props => <Settings {...props} />}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppRouter;\r\n","import React, {Component, Fragment} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport logo from '../../assets/logo.svg';\r\nimport './Header.scss';\r\n\r\nclass Header extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Header\">\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<header className=\"app-header\">\r\n\t\t\t\t\t\t<NavLink to=\"/dashboard\"><div className=\"navigation-item\">Dashboard</div></NavLink>\r\n\t\t\t\t\t\t<NavLink to=\"/settings\"><div className=\"navigation-item\">Settings</div></NavLink>\r\n\r\n\t\t\t\t\t\t<img src={logo} className=\"app-logo\" alt=\"logo\"/>\r\n\t\t\t\t\t\t<span className=\"app-title\">React App</span>\r\n\t\t\t\t\t</header>\r\n\t\t\t\t</Fragment>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component, Fragment } from 'react';\r\nimport './App.scss';\r\nimport AppRouter from './appRouter/AppRouter';\r\nimport Header from './components/header/Header';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                    <Fragment>\r\n                        <Header />\r\n                        <AppRouter />\r\n                    </Fragment>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","\r\n// import { combineReducers } from 'redux';\r\nimport { SEARCH_TEXT } from './actionTypes';\r\n\r\nconst initialState = {\r\n    searchText: 'Redux working'\r\n};\r\n\r\nfunction searchTextReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SEARCH_TEXT:\r\n            return Object.assign({}, state, {\r\n                searchText: action.text\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = searchTextReducer;\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t// [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === '[::1]' ||\r\n\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\twindow.location.hostname.match(\r\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t)\r\n);\r\n\r\nexport default function register() {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not local host. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\r\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\r\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\r\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('Error during service worker registration:', error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t'No internet connection found. App is running in offline mode.'\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}